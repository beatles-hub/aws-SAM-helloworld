AWSTemplateFormatVersion: '2010-09-09'
Description: >
    Template to build required infra for this system

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "App Settings"
        Parameters:
          - AppName
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - AppCodeComitRepoName
          - AppCodeComitRepoBranchName

Parameters:

  AppName:
    Type: String
    Default: hello-world
    Description: Name of the application
    AllowedPattern: ^[a-z0-9-_]{1,12}$
    ConstraintDescription: Malformed input-Parameter MyParameter must match pattern ^[a-z0-9-_]{1,12}$
  AppCodeComitRepoName:
    Type: String
    Description: Name of the CodeCommit Repo
  AppCodeComitRepoBranchName:
    Type: String
    Default: master
    Description: Name of the Branch to poll for changes




Resources:

  # Actions Ref:
  #  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html
  #
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineS3Bucket
        Type: S3
      DisableInboundStageTransitions: []
      Name: !Sub ${AppName}-pipeline
      RoleArn: !GetAtt PipelineServiceRole.Arn
      Stages:
        # found GH example here: https://docs.aws.amazon.com/codepipeline/latest/userguide/update-change-detection.html
        - Name: Source
          Actions:
            -
              Name: CodeCommitSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutputArtifact
              Configuration:
                RepositoryName: !Ref AppCodeComitRepoName
                BranchName: !Ref AppCodeComitRepoBranchName
                PollForSourceChanges: true
              RunOrder: 1
        - Name: Build
          Actions:
            -
              Name: CodeBuild
              InputArtifacts:
                -
                  Name: SourceOutputArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildOutputArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            -
              Name: CF_Changeset_Create
              InputArtifacts:
                - Name: BuildOutputArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                - Name: ChangeSetCreateOutputArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Sub ${AppName}-pipeline-created
                RoleArn: !GetAtt CodeDeployServiceRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Sub Prod-${AWS::StackName}
                # TemplateConfiguration: BuildArtifact::config-prod.json
                TemplatePath: BuildOutputArtifact::sam-packaged.yaml
              RunOrder: 1
            -
              Name: CF_Changeset_Execute
              InputArtifacts:
                - Name: ChangeSetCreateOutputArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                - Name: ChangeSetExecuteOutputArtifact
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${AppName}-pipeline-created
                StackName: !Sub Prod-${AWS::StackName}
              RunOrder: 2

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AppName}-CodeBuild-Project
      Description: Build project for code pipeline
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.6.5
        ImagePullCredentialsType: CODEBUILD
        EnvironmentVariables:
          -
            Name: LAMBDA_PKG_BUCKET
            Type: PLAINTEXT
            Value: !Ref LambdaS3Bucket
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 15
      LogsConfig:
        CloudWatchLogs:
          Status:  ENABLED
          GroupName:  !Sub ${AppName}-CodeBuild



  PipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            {
              "Statement": [
              {
                "Action": [
                  "iam:PassRole"
                ],
                "Resource": "*",
                "Effect": "Allow",
                "Condition": {
                  "StringEqualsIfExists": {
                    "iam:PassedToService": [
                      "cloudformation.amazonaws.com",
                      "elasticbeanstalk.amazonaws.com",
                      "ec2.amazonaws.com",
                      "ecs-tasks.amazonaws.com"
                    ]
                  }
                }
              },
              {
                "Action": [
                  "codecommit:CancelUploadArchive",
                  "codecommit:GetBranch",
                  "codecommit:GetCommit",
                  "codecommit:GetUploadArchiveStatus",
                  "codecommit:UploadArchive"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "codedeploy:CreateDeployment",
                  "codedeploy:GetApplication",
                  "codedeploy:GetApplicationRevision",
                  "codedeploy:GetDeployment",
                  "codedeploy:GetDeploymentConfig",
                  "codedeploy:RegisterApplicationRevision"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "elasticbeanstalk:*",
                  "ec2:*",
                  "elasticloadbalancing:*",
                  "autoscaling:*",
                  "cloudwatch:*",
                  "s3:*",
                  "sns:*",
                  "cloudformation:*",
                  "rds:*",
                  "sqs:*",
                  "ecs:*"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "lambda:InvokeFunction",
                  "lambda:ListFunctions"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "opsworks:CreateDeployment",
                  "opsworks:DescribeApps",
                  "opsworks:DescribeCommands",
                  "opsworks:DescribeDeployments",
                  "opsworks:DescribeInstances",
                  "opsworks:DescribeStacks",
                  "opsworks:UpdateApp",
                  "opsworks:UpdateStack"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "cloudformation:CreateStack",
                  "cloudformation:DeleteStack",
                  "cloudformation:DescribeStacks",
                  "cloudformation:UpdateStack",
                  "cloudformation:CreateChangeSet",
                  "cloudformation:DeleteChangeSet",
                  "cloudformation:DescribeChangeSet",
                  "cloudformation:ExecuteChangeSet",
                  "cloudformation:SetStackPolicy",
                  "cloudformation:ValidateTemplate"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "codebuild:BatchGetBuilds",
                  "codebuild:StartBuild"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "devicefarm:ListProjects",
                  "devicefarm:ListDevicePools",
                  "devicefarm:GetRun",
                  "devicefarm:GetUpload",
                  "devicefarm:CreateUpload",
                  "devicefarm:ScheduleRun"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "servicecatalog:ListProvisioningArtifacts",
                  "servicecatalog:CreateProvisioningArtifact",
                  "servicecatalog:DescribeProvisioningArtifact",
                  "servicecatalog:DeleteProvisioningArtifact",
                  "servicecatalog:UpdateProduct"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cloudformation:ValidateTemplate"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ecr:DescribeImages"
                ],
                "Resource": "*"
              }
              ],
              "Version": "2012-10-17"
            }

  # @TODO
  #  - code-build
  #    - service role
  #    - s3 bucket (use lambda bucket??)
  #  - code-pipeline
  #    - service role





  # This is the service role utilized by the CloudFormation Action of
  # the CodeDeploy step
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-CodeDeploy-Service-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /

  CodeDeployServiceRolePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: !Sub ${AppName}-CodeDeploy-Service-Role-Policy
        Roles: [ !Ref CodeDeployServiceRole ]
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:GetBucketVersioning
              Resource: "*"
            -
              # Need to put lambda packages in the app's designated S3 bucket
              Action:
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${LambdaS3Bucket}/*
              Effect: Allow
            -
              Action:
                - lambda:*
              Resource:
                - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
              Effect: Allow
            -
              Action:
                - apigateway:*
              Resource:
                - !Sub arn:aws:apigateway:${AWS::Region}::*
              Effect: Allow
            -
              Action:
                - iam:GetRole
                - iam:CreateRole
                - iam:DeleteRole
                - iam:PutRolePolicy
              Resource:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/*
              Effect: Allow
            -
              Action:
                - iam:AttachRolePolicy
                - iam:DeleteRolePolicy
                - iam:DetachRolePolicy
              Resource:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/*
              Effect: Allow
            -
              Action:
                - iam:PassRole
              Resource:
                - "*"
              Effect: Allow
            -
              Action:
                - cloudformation:CreateChangeSet
              Resource:
                - !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              Effect: Allow
            -
              Action:
                - codedeploy:CreateApplication
                - codedeploy:DeleteApplication
                - codedeploy:RegisterApplicationRevision
              Resource:
                - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
              Effect: Allow
            -
              Action:
                - codedeploy:CreateDeploymentGroup
                - codedeploy:CreateDeployment
                - codedeploy:GetDeployment
              Resource:
                - !Sub  arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*
              Effect: Allow
            -
              Action:
                - codedeploy:GetDeploymentConfig
              Resource:
                - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*
              Effect: Allow

  # This is the service role utilized by the CodeBuild step
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-CodeBuild-Service-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: /

  CodeBuildServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AppName}-CodeBuild-Service-Role-Policy
      Roles: [ !Ref CodeBuildServiceRole ]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AppName}-CodeBuild
              - !Sub  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AppName}-CodeBuild:*
          -
            # access to the shared CodePipeline bucket for storing & exchanging pipeline output artifacts
            # for a given pipeline
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*


Outputs:

  ServiceRoleForCodeDeploy:
    Description: The CodeBuild's Service Role
    Value: !Ref CodeDeployServiceRole
  ServiceRoleForCodeBuild:
    Description: The CodeBuild's Service Role
    Value: !Ref CodeBuildServiceRole
